<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.midnear.midnearshopping.mapper.products.ProductsMapper">
    <insert id="registerProducts" useGeneratedKeys="true" keyProperty="productId">
        INSERT INTO products (
        product_name, price, discount_price, discount_rate, discount_start_date, discount_end_date, detail, size_guide, registered_date, category_id
        ) VALUES (
        #{productName}, #{price}, #{discountPrice}, #{discountRate}, #{discountStartDate}, #{discountEndDate}, #{detail}, #{sizeGuide}, NOW(), #{categoryId}
        )
    </insert>
    <select id="getProductPaging" resultType="ProductsVo">
        SELECT *
        FROM products
        WHERE <include refid="dateCondition" />
        <if test="searchText != null">
            <choose>
                <when test="searchRange == '상품명'">
                    AND product_name LIKE CONCAT('%', #{searchText}, '%')
                </when>
                <when test="searchRange == '등록일시'">
                    AND registered_date LIKE CONCAT('%', #{searchText}, '%')
                </when>
            </choose>
        </if>
        ORDER BY registered_date ${orderBy}
    LIMIT #{size} OFFSET #{offset}
    </select>
    <select id="count">
        SELECT count(*)
        FROM products
        WHERE <include refid="dateCondition" />
        <if test="searchText != null">
            <choose>
                <when test="searchRange == '상품명'">
                    AND product_name LIKE CONCAT('%', #{searchText}, '%')
                </when>
                <when test="searchRange == '등록일시'">
                    AND registered_date LIKE CONCAT('%', #{searchText}, '%')
                </when>
            </choose>
        </if>
    </select>
    <select id="getProductsByCategoryIds" resultType="ProductsVo">
        SELECT *
        FROM products
        WHERE category_id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getProductsBySaleStatus" resultType="ProductsVo">
        SELECT p.product_id AS productId,
        p.product_name AS productName,
        p.price,
        p.discount_price AS discountPrice,
        p.detail,
        p.discount_rate AS discountRate,
        p.size_guide AS sizeGuide,
        p.registered_date AS registeredDate,
        p.discount_start_date AS discountStartDate,
        p.discount_end_date AS discountEndDate,
        p.category_id AS categoryId
        FROM products p
        left JOIN product_colors pc ON p.product_id = pc.product_id
        WHERE pc.sale_status = #{searchText} <!-- 판매상태에 맞는 조건 -->
        <include refid="dateCondition" />
        GROUP BY p.product_id
        ORDER BY p.registered_date ${orderBy}
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="getProductById" resultType="ProductsVo">
        SELECT * FROM products
        WHERE product_id = #{productId};
    </select>
    <update id="updateProduct">
        UPDATE products
        SET
            product_name = #{productName},
            price = #{price},
            discount_price = #{discountPrice},
            detail = #{detail},
            discount_rate = #{discountRate},
            size_guide = #{sizeGuide},
            registered_date = NOW(),
            discount_start_date = #{discountStartDate},
            discount_end_date = #{discountEndDate},
            category_id = #{categoryId}
        WHERE product_id = #{productId}
    </update>
    <select id="findByProductId" resultType="ProductsVo">
        SELECT * FROM products
        WHERE product_id = #{productId}
    </select>
    <delete id="deleteProducts">
        DELETE FROM products
        WHERE product_id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>


    <!--여기서부터 사용자 파트-->
    <select id="getProductsByCategory">
        SELECT
            p.product_id AS productId,
            p.product_name AS productName,
            p.price AS price,
            p.discount_price AS discountPrice,
            p.discount_rate AS discountRate,
            p.category_id AS categoryId,
            pi.front_image_url AS frontImageUrl,
            pi.back_image_url AS backImageUrl
        FROM
            products p
                LEFT JOIN
            product_images pi ON p.product_id = pi.product_id
        WHERE
            p.category_id = #{categoryId}
        </select>
    <select id="getProductsByCategoryWithHierarchy">
<!--카테고리 계층구조때문에 재귀써서 먼저 카테고리 불러왔습니당-->
        WITH RECURSIVE CategoryHierarchy AS (
        SELECT
        category_id
        FROM
        categories
        WHERE
        category_id = #{categoryId}
        UNION ALL
        SELECT
        c.category_id
        FROM
        categories c
        INNER JOIN
        CategoryHierarchy ch ON c.parent_category_id = ch.category_id
        )
        SELECT
        pc.product_color_id AS colorId,
        p.product_name AS productName,
        p.price AS price,
        p.discount_price AS discountPrice,
        p.discount_rate AS discountRate,
        p.category_id AS categoryId,
        SUBSTRING_INDEX(GROUP_CONCAT(pi.image_url ORDER BY pi.product_image_id ASC), ',', 1) AS frontImageUrl,
        SUBSTRING_INDEX(SUBSTRING_INDEX(GROUP_CONCAT(pi.image_url ORDER BY pi.product_image_id ASC), ',', 2), ',', -1) AS backImageUrl,
        COUNT(op.order_product_id) AS popularity
        FROM
        products p
        LEFT JOIN
        product_colors pc ON p.product_id = pc.product_id
        LEFT JOIN
        product_images pi ON pc.product_color_id = pi.product_color_id
        LEFT JOIN
        order_products op ON op.order_product_id = p.product_id
        WHERE
        p.category_id IN (SELECT category_id FROM CategoryHierarchy)
        GROUP BY
        pc.product_color_id
        ORDER BY
        <choose>
            <when test="sort == 'latest'">
                p.registered_date DESC
            </when>
            <when test="sort == 'lowPrice'">
                p.price ASC
            </when>
            <when test="sort == 'highDiscount'">
                p.discount_rate DESC
            </when>
            <when test="sort == 'popularity'">
                popularity DESC
            </when>
            <otherwise>
                pc.product_color_id ASC
            </otherwise>
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>
    <sql id="dateCondition">
        <choose>
            <when test="dateRange == '오늘'">
                DATE(registered_date) = CURDATE()
            </when>
            <when test="dateRange == '일주일'">
                registered_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
            </when>
            <when test="dateRange == '1개월'">
                registered_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
            </when>
            <when test="dateRange == '3개월'">
                registered_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
            </when>
            <when test="dateRange == '1년'">
                registered_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
            </when>
            <otherwise>
                1=1
            </otherwise>
        </choose>
    </sql>

</mapper>